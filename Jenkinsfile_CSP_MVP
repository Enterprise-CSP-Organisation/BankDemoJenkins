node {
    environment {
         myJson = ''
	 responseCN = ''
	 responsemfError = ''
	 responsemfServerStatus = ''
    }
    stage('Env Variables') {
	 bat 'set'
    }
    
    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */
        cleanWs()
	git branch: "main",
        url: 'https://github.com/MicroFocus/BankDemo.git'
    }

    stage('Build') {

    }

    stage('Release') {
	//Create System Release folder structure
	powershell '''
	New-Item -Path build -ItemType directory
	New-Item -Path test -ItemType directory
	New-Item -Path test\\logs -ItemType directory
	New-Item -Path build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system -ItemType directory
	New-Item -Path build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\catalog -ItemType directory
	New-Item -Path build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\catalog\\data -ItemType directory
	New-Item -Path build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\loadlib -ItemType directory
	New-Item -Path build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\logs -ItemType directory
	New-Item -Path build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\rdef -ItemType directory
	Invoke-WebRequest -Headers @{"Cache-Control"="no-cache"} https://raw.githubusercontent.com/MicroPJ/BankDemoJenkins/main/BANKVSAM.json -OutFile "build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\rdef\\BANKVSAM.json"
	Invoke-WebRequest -Headers @{"Cache-Control"="no-cache"} https://raw.githubusercontent.com/MicroPJ/BankDemoJenkins/main/BANKDEMO.xml -OutFile "build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\rdef\\BANKVSAM.xml"
	Copy-Item -Path "datafiles\\*" -Destination "build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\catalog\\data"
	Copy-Item -Path "executables\\Windows\\x64\\core\\*" -Destination "build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\loadlib"
	Copy-Item -Path "executables\\Windows\\x64\\data\\VSAM\\*" -Destination "build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\loadlib"
	Copy-Item -Path "executables\\Windows\\x64\\system\\*" -Destination "build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\loadlib"
	Invoke-WebRequest -Headers @{"Cache-Control"="no-cache"} https://raw.githubusercontent.com/MicroPJ/BankDemoJenkins/main/dfhdrdat -OutFile "build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\rdef\\dfhdrdat"
	Compress-Archive -Path "build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system" -DestinationPath "build\\Release-$env:BUILD_TAG.zip"
	'''
	archiveArtifacts artifacts: 'build/*.zip', fingerprint: true
    }
     
    stage('Deploy') {

	//Logoff
	//bat 'curl -X "DELETE" "http://127.0.0.1:10086/logoff" -H "Cache-Control: no-cache" -H "Origin:http://localhost:86" -H "Host:localhost:86" -H "accept: application/json" -H "X-Requested-With: X-Requested-With"'
	
	//Logon
	//bat 'curl -X POST "http://127.0.0.1:10086/logon" -H "Cache-Control: no-cache" -H "Origin:http://localhost:86" -H "Host:localhost:86" -H "accept: application/json" -H "X-Requested-With: X-Requested-With" -H "Content-Type: application/json" -d "{\\"CN\\":\\"region\\",\\"mfUser\\":\\"sysad\\",\\"mfPassword\\":\\"sysad\\",\\"mfUseSession\\":\\"true\\"}"'
 
	powershell '''
	# Logoff
	Invoke-WebRequest -Method DELETE -Headers @{"X-Requested-With"="X-Requested-With";"Origin"="http://localhost:86";"Host"="localhost:86";"accept"="application/json";} http://127.0.0.1:10086/logoff -OutFile "test\\logs\\logoff.json" | ConvertFrom-Json  
	# Logon
	Invoke-WebRequest -Method POST -Headers @{"X-Requested-With"="X-Requested-With";"Origin"="http://localhost:86";"Host"="localhost:86";"accept"="application/json";} http://127.0.0.1:10086/logon -Body "{\\"CN\\":\\"region\\",\\"mfUser\\":\\"sysad\\",\\"mfPassword\\":\\"sysad\\",\\"mfUseSession\\":\\"true\\"}" -OutFile "test\\logs\\logon.json" | ConvertFrom-Json  
	# Import
	$env:myJson = Get-Content 'build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\rdef\\BANKVSAM.json' | ConvertFrom-Json
	Invoke-WebRequest -Method POST -Headers @{"X-Requested-With"="X-Requested-With";"Origin"="http://localhost:86";"Host"="localhost:86";"accept"="application/json";} http://127.0.0.1:10086/native/v1/import/127.0.0.1/86 -Body "$env:myJson" -OutFile "test\\logs\\import.json" | ConvertFrom-Json  

	'''
	      
	//IMPORT JSON
        //bat '''curl -X POST "http://127.0.0.1:10086/native/v1/import/127.0.0.1/86" -H "Cache-Control: no-cache" -H "Origin:http://localhost:86" -H "Host:localhost:86" -H "accept: application/json" -H "X-Requested-With: X-Requested-With" -H "Content-Type: application/json" -d "@build\\Release-jenkins-CSP_MVP_Jenkinsfile\\system\\rdef\\BANKVSAM.json"'''
    }
    
    stage('Test') {  

        powershell '''
	Invoke-WebRequest -Headers @{"X-Requested-With"="X-Requested-With";"Origin"="http://localhost:86";"Host"="localhost:86";"accept"="application/json";} http://localhost:10086/native/v1/regions/127.0.0.1/86/BANKVSAM/status -OutFile "test\\logs\\status.json" | ConvertFrom-Json  
	$env:myJson = Get-Content 'test\\logs\\status.json' | ConvertFrom-Json
	$env:responseCN = (Get-Content 'test\\logs\\status.json' | ConvertFrom-Json).CN
	$env:responsemfError = (Get-Content 'test\\logs\\status.json' | ConvertFrom-Json).mfError
	$env:responsemfServerStatus = (Get-Content 'test\\logs\\status.json' | ConvertFrom-Json).mfServerStatus
	write-output "Region $env:responseCN is $env:responsemfError with status $env:responsemfServerStatus"
	
	if ($env:responsemfError = 'OKAY')
	{
	  write-host "TEST PASSED"
	  exit 0
	}else{
	  write-host "TEST FAILED"
	  exit 1
	}
	'''
    }
}
